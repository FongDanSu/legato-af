
//--------------------------------------------------------------------------------------------------
/**
 * @page c_le_avdata AirVantage Data
 *
 * @ref le_avdata_interface.h "Type/Function Reference" <br>
 * @ref avData "How To Manage Data"
 *
 * <HR>
 *
 * This API provides a data service to allow apps to manage app-specific
 * data on the AirVantage server.
 *
 * Data is setup as @b assets &mdash;  a collection of fields that can be managed by the AirVantage
 * server.
 *
 * An asset field is a single piece of information that can be managed by the AirVantage server.
 *
 * A field can be:
 * - @c variable allowing an app to read/write the value, and can be read from the AV server.
 * - @c setting allowing the AV server to read/write the value, and can be read by an app.
 * - @c command allowing the AV server to invoke a function in the app.
 *
 * A field is referred to by a path, much like a path in Unix-like OSes. So a path is separated by
 * slashes ("/"), a parent path cannot contain a field, and a parent path cannot contain a parent
 * path and a child path of the same name.
 *
 * Variable and setting fields also have types. The field types are:
 * - string
 * - integer
 * - float
 * - boolean
 *
 * variable and setting fileds have no default values. When they are first created with the
 * CreateResource API, they contain "null" values. They can also be set to "null" values with the
 * SetNull API. A field does not have a fixed data type, so any of the SetInt/Float/Bool/String can
 * be called for a certain field to change its value and its type. However, A
 * GetInt/Float/Bool/String API must be called on a field with the matching type. In other words,
 * a Get API does not perform type-casting.
 *
 *
 * @section le_avdata_field Field Values and Activity
 *
 * Set functions are available to set field values (including null). Get functions are
 * available to get field values.
 *
 * An app can register a handler so that it can be called when an activity occurs on a field.
 * This is optional for variable and setting fields, but is required for command fields. Registered
 * handlers are called only when activities from AV server occurs. Client activites do not trigger
 * handlers.
 *
 * A handler registered with a command field is invoked with an optional argument list sent from the
 * AV server. The APIs GetInt/Float/Bool/StringArg and GetStringArgLength are available to extract
 * the arguments in the handler definition. AV server does not send argument lists for handlers
 * registered with variable and setting fields.
 *
 * A handler registered with a command field must call the ReplyExecResult API at the end of its
 * definition, in order to reply the command execution result to the AV server.
 *
 *
 * @section le_avdata_timeseries Time Series
 *
 * This feature enables user apps to collect data when the device is offline. A time series
 * record can be initialized using le_avdata_CreateRecord() and data can be accumulated using
 * le_avdata_RecordInt(), le_avdata_RecordFloat(), le_avdata_RecordBool and le_avdata_RecordString
 * with a specified time stamp (milliseconds elapsed since epoch). User apps can then open an
 * @c avms session, and push the collected history data using le_avdata_PushRecord(). The callback
 * used when calling le_avdata_PushRecord() will indicate whether the push has been successful or not.
 *
 * This code sample shows how to collect data and send to the server (assuming session is opened)
 *
 * @code
 *
 * static void PushCallbackHandler
 * (
 *     le_avdata_PushStatus_t status,
 *     void* contextPtr
 * )
 * {
 *     if (status == LE_AVDATA_PUSH_SUCCESS)
 *     {
 *         // data pushed successfully
 *     }
 * }
 *
 * static void SendData()
 * {
 *     struct timeval tv;
 *     uint64_t utcMilliSec;
 *     le_result_t result;
 *
 *     le_avdata_RecordRef_t recRef = le_avdata_CreateRecord();
 *
 *     gettimeofday(&tv, NULL);
 *     utcMilliSec = (uint64_t)(tv.tv_sec) * 1000 + (uint64_t)(tv.tv_usec) / 1000; // get current time
 *     result = le_avdata_RecordFloat(recRef, "speed", 0.08, utcMilliSec);
 *
 *     if (result != LE_OK)
 *     {
 *          le_avdata_PushRecord(recRef, PushCallbackHandler, NULL);
 *     }
 *
 *     le_avdata_DeleteRecord(recRef);
 * }
 * @endcode
 *
 * @section le_avdata_session User app session management
 *
 * An app can request to open avms session and register a handler to get notified of avms session
 * events. le_avdata_RequestSession() and le_avdata_ReleaseSession() can be used to
 * open an avms session and close an avms session respectively. If the session was initiated by an
 * user app, avms session will be closed when all apps release their session reference.
 * le_avdata_AddSessionStateHandler() and le_avdata_RemoveSessionStateHandler() can be used to add
 * and remove notification handlers.
 *
 * @section le_avdata_fatal Fatal Behavior
 *
 * An invalid asset name or field name is treated as a fatal error (i.e. non-recoverable)
 * and will result in the client app being terminated.
 *
 * <HR>
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
/**
 * Define the maximum characters and bytes of a path name
 */
//--------------------------------------------------------------------------------------------------
DEFINE PATH_NAME_LEN = 511;
DEFINE PATH_NAME_BYTES = (PATH_NAME_LEN + 1);


//--------------------------------------------------------------------------------------------------
/**
 * Define the maximum characters and bytes of a string
 */
//--------------------------------------------------------------------------------------------------
DEFINE STRING_VALUE_LEN = 255;
DEFINE STRING_VALUE_BYTES = (STRING_VALUE_LEN + 1);


//--------------------------------------------------------------------------------------------------
/**
 * Resource access modes.
 *   Variable: read (server), read/write (client)
 *   Setting: read/write (server), read (client)
 *   Command: execute (server)
 */
//--------------------------------------------------------------------------------------------------
ENUM AccessMode
{
    ACCESS_VARIABLE,
    ACCESS_SETTING,
    ACCESS_COMMAND
};


//--------------------------------------------------------------------------------------------------
/**
 * Resource access types
 */
//--------------------------------------------------------------------------------------------------
BITMASK AccessType
{
    ACCESS_READ,
    ACCESS_WRITE,
    ACCESS_EXEC
};


//--------------------------------------------------------------------------------------------------
/**
 * Data types
 */
//--------------------------------------------------------------------------------------------------
ENUM DataType
{
    DATA_TYPE_NONE,
    DATA_TYPE_INT,
    DATA_TYPE_FLOAT,
    DATA_TYPE_BOOL,
    DATA_TYPE_STRING
};


//--------------------------------------------------------------------------------------------------
/**
 * Status of the data push (TODO: Provide additional status to troubleshoot delivery problems)
 */
//--------------------------------------------------------------------------------------------------
ENUM PushStatus
{
    PUSH_SUCCESS,
    PUSH_FAILED
};


//--------------------------------------------------------------------------------------------------
/**
 * Argument list reference, for command only.
 */
//--------------------------------------------------------------------------------------------------
REFERENCE ArgumentList;


//--------------------------------------------------------------------------------------------------
/**
 * Handler for resource activity
 */
//--------------------------------------------------------------------------------------------------
HANDLER ResourceHandler
(
    string path[PATH_NAME_LEN] IN,
    AccessType accessType IN,
    ArgumentList ArgumentListRef IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Handler for pushing data result.
 */
//--------------------------------------------------------------------------------------------------
HANDLER CallbackResult
(
    PushStatus status IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Upon resource access on the server side, the registered handler is called.
 *
 * For "settings" (read/write), the same handler is called for both read and write access.
 *
 * For "commands", the handler function must call the "ReplyExecResult" function to send the command
 * execution result back to the AVC daemon (which then sends the proper response back to the AV
 * server).
 */
//--------------------------------------------------------------------------------------------------
EVENT ResourceEvent
(
    string path[PATH_NAME_LEN] IN,
    ResourceHandler handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Create an asset data with the provided path. Note that asset data type and value are determined
 * upon the first call to a Set function. When an asset data is created, it contains a null value,
 * represented by the data type of none.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_DUPLICATE if path has already been called by CreateResource before, or path is parent
 *        or child to an existing Asset Data path.
 *      - LE_FAULT on any other error.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t CreateResource
(
    string path[PATH_NAME_LEN] IN,
    AccessMode accessMode
);


//--------------------------------------------------------------------------------------------------
/**
 * Sets an asset data to contain a null value, represented by the data type of none.
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetNull
(
    string path[PATH_NAME_LEN] IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Gets the integer value of an asset data.
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_UNAVAILABLE - asset data contains null value
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetInt
(
    string path[PATH_NAME_LEN] IN,
    int32 value OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Sets an asset data to an integer value.
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetInt
(
    string path[PATH_NAME_LEN] IN,
    int32 value IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Gets the float value of an asset data.
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_UNAVAILABLE - asset data contains null value
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetFloat
(
    string path[PATH_NAME_LEN] IN,
    double value OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Sets an asset data to a float value.
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetFloat
(
    string path[PATH_NAME_LEN] IN,
    double value IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Gets the bool value of an asset data.
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_UNAVAILABLE - asset data contains null value
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBool
(
    string path[PATH_NAME_LEN] IN,
    bool value OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Sets an asset data to a bool value.
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetBool
(
    string path[PATH_NAME_LEN] IN,
    bool value IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Gets the string value of an asset data.
 *
 * @return:
 *      - LE_BAD_PARAMETER - asset data being accessed is of the wrong data type
 *      - LE_UNAVAILABLE - asset data contains null value
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetString
(
    string path[PATH_NAME_LEN] IN,
    string value[STRING_VALUE_LEN] OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Sets an asset data to a string value.
 *
 * @return:
 *      - LE_NOT_FOUND - if the path is invalid and does not point to an asset data
 *      - LE_NOT_PERMITTED - asset data being accessed does not have the right permission
 *      - LE_OK - access successful.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t SetString
(
    string path[PATH_NAME_LEN] IN,
    string value[STRING_VALUE_LEN] IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the bool argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetBoolArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    bool boolArg OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the float argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetFloatArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    double floatArg OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the int argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetIntArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    int32 intArg OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the string argument with the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetStringArg
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    string strArg[STRING_VALUE_LEN] OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Get the length (excluding terminating null byte) of the string argument of the specified name.
 *
 * @return:
 *      - LE_OK on success
 *      - LE_NOT_FOUND if argument doesn't exist, or its data type doesn't match the API.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t GetStringArgLength
(
    ArgumentList argumentListRef IN,
    string argName[STRING_VALUE_LEN] IN,
    int32 strArgLen OUT
);


//--------------------------------------------------------------------------------------------------
/**
 * Reply command execution result to AVC Daemon, which can then respond to AV server. This function
 * MUST be called at the end of a command execution, in order for AV server to be notified about the
 * execution status.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ReplyExecResult
(
    le_result_t result IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Push asset data to the server.
 *
 * @return:
 *      - LE_OK on success.
 *      - LE_NOT_FOUND if path doesn't exist.
 *      - LE_BUSY if push is queued and will pushed later
 *      - LE_NOT_POSSIBLE if push queue is full, try again later
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t Push
(
    string path[PATH_NAME_LEN] IN,
    CallbackResult handler
);


//--------------------------------------------------------------------------------------------------
/**
 * A record reference
 */
//--------------------------------------------------------------------------------------------------
REFERENCE Record;


//--------------------------------------------------------------------------------------------------
/**
 * Create a timeseries record
 *
 * @return Reference to the record
 */
//--------------------------------------------------------------------------------------------------
FUNCTION Record CreateRecord
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Delete a timeseries record
 */
//--------------------------------------------------------------------------------------------------
FUNCTION DeleteRecord
(
    Record recordRef IN
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate int data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordInt
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    int32 value IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate float data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordFloat
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    double value IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate boolean data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordBool
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    bool value IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Accumulate string data
 *
 * @note The client will be terminated if the recordRef is not valid, or the resource doesn't exist
 *
 * @return:
 *      - LE_OK on success
 *      - LE_OVERFLOW if the current entry was NOT added because the time series buffer is full.
 *      - LE_FAULT on any other error
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t RecordString
(
    Record recordRef IN,
    string path[PATH_NAME_LEN] IN,
    string value[STRING_VALUE_LEN] IN,
    uint64 timestamp
);


//--------------------------------------------------------------------------------------------------
/**
 * Push record to the server
 *
* @return:
 *      - LE_OK on success.
 *      - LE_NOT_POSSIBLE if push queue is full, try again later
 *      - LE_UNAVAILABLE if no data connection is available
 *      - LE_FAULT on any other error
 *
 * * @note If the caller is passing a bad pointer into this function, it is a fatal error, the
 *       function will not return.
 */
//--------------------------------------------------------------------------------------------------
FUNCTION le_result_t PushRecord
(
    Record recordRef,
    CallbackResult handler
);


//--------------------------------------------------------------------------------------------------
/**
 * Reference returned by RequestSession function and used by ReleaseSession function
 */
//--------------------------------------------------------------------------------------------------
REFERENCE RequestSessionObj;


//--------------------------------------------------------------------------------------------------
/**
 * AVMS session state
 */
//--------------------------------------------------------------------------------------------------
ENUM SessionState
{
    SESSION_STARTED,        ///< AVMS session started
    SESSION_STOPPED         ///< AVMS session stopped
};


//--------------------------------------------------------------------------------------------------
/**
 * Handler for AV session changes
 */
//--------------------------------------------------------------------------------------------------
HANDLER SessionStateHandler
(
    SessionState sessionState IN            ///< Session started or stopped?
);


//--------------------------------------------------------------------------------------------------
/**
 * This event provides information on AV session state changes
 */
//--------------------------------------------------------------------------------------------------
EVENT SessionState
(
    SessionStateHandler handler
);



//--------------------------------------------------------------------------------------------------
/**
 * Request the avcServer to open a session.
 *
 * @return
 *      - SessionRef if session request succeeded
 *      - NULL if session request failed
 */
//--------------------------------------------------------------------------------------------------
FUNCTION RequestSessionObj RequestSession
(
);


//--------------------------------------------------------------------------------------------------
/**
 * Request the avcServer to close a session.
 *
 */
//--------------------------------------------------------------------------------------------------
FUNCTION ReleaseSession
(
    RequestSessionObj requestRef IN  ///< Reference to a previously opened AV session.
);