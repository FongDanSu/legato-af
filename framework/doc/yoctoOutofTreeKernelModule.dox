/** @page yoctoOutofTreeKernelModule Out-of-Tree Kernel Modules

This topic provides details on how to prepare, build, and load/unload out-of-tree kernel drivers.

Linux kernel modules can be loaded/unloaded in runtime, which allows for smaller core kernel
images and more flexibles systems.

Also see @ref defFilesMdef

@section howToAddKernelDriver_setBuildEnv Set Build Environment

To overcome a current deficiency in the Yocto kernel-dev package, you need to set the module build
environment:
@code
cd ./y17-ext/sysroots/armv7a-vfp-neon-poky-linux-gnueabi/usr/src/kernel
ARCH=arm CROSS_COMPILE=arm-poky-linux-gnueabi- make scripts
@endcode

@section howToAddKernelDriver_installToolchain Install Toolchain to Build Kernel Modules

This process involves changing the make configuration before you build the kernel, to do this it is
recommended that you install another separate version of the toolchain for this purpose.

Create an install directory and open a Linux shell to ensure the top directory is known like this:
@code
mkdir yocto-install
cd yocto-install
export TOPDIR=${PWD}
@endcode

Then download the appropriate toolchain for your environment from the
<a href="http://source.sierrawireless.com/resources/legato/downloads/">Legato Downloads</a> page.
You can use @c wget after you know the filename.

Ensure you have appropriate access to run the toolchain install script:
@code
chmod 755 <toolchain filename>
@endcode

Start installation:
@code
 ./poky-swi-ext-glibc-x86_64-meta-toolchain-swi-ext-armv7a-vfp-neon-toolchain-swi-ext-1.7.3.sh
@endcode

When asked @c type, enter this:
@code
Enter the target directory for SDK (default: /opt/swi/y17-ext): ./y17-ext
@endcode

Then press <ENTER> twice:
- once to confirm the command
- once to answer "Y" to the following question.

Check to ensure the toolchain is in your path:
@code
export PATH=$PATH:${PWD}/y17-ext/sysroots/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi
@endcode

It's recommended to add the toolchain path to your @c  ~/.profile file so it's available every time
you log in.
@section howToAddKernelDriver_setBuildEnv Set Build Environment

To overcome a current deficiency in the Yocto kernel-dev package, you need to set the module build
environment:
@code
cd ./y17-ext/sysroots/armv7a-vfp-neon-poky-linux-gnueabi/usr/src/kernel
ARCH=arm CROSS_COMPILE=arm-poky-linux-gnueabi- make scripts
@endcode

@section howToAddKernelDriver_makeKernel Make Kernel Module

First, ensure the kernel module support root directory is known:
@code
export B_KDIR=${PWD}
cd $TOPDIR
@endcode

Next, make an example kernel module directory, and go to it
@code
mkdir kmodule
cd kmodule
@endcode

@subsection howToAddKernelDriver_makeKernel_cFile C File Example

Create a kernel file like this simple @c ktest_module.c example:

@code
#include <linux/module.h>    /* Needed by all modules */
#include <linux/kernel.h>    /* Needed for KERN_INFO */
#include <linux/init.h>      /* Needed for the macros */

static int __init ktest_module_init(void)
{
    printk(KERN_INFO "Driver version %s\n", VERSION);
    printk(KERN_INFO "Buona Sera :)\n");
    return 0;
}

static void __exit ktest_module_exit(void)
{
    printk(KERN_INFO "Ciao!\n");
}

module_init(ktest_module_init);
module_exit(ktest_module_exit);
@endcode


@subsection howToAddKernelDriver_makeKernel_makefile Makefile Example
Create a @c makefile like this simple example:

@code
# Kernel module build command for ARM targets is:
# make ARCH=arm CROSS_COMPILE=arm-poky-linux-gnueabi-
#
# List of object file(s) to be built
obj-m+=ktest_module.o
#
# Point to the directory containing sources for the kernel running on target
# system. The kernel directory must have the configuration build step executed,
# i.e. it must contain the target system's .config file.
#
# Legato tools contain such a directory, point to it.
KBUILD_DIR=/opt/swi/y17-ext/sysroots/armv7a-vfp-neon-poky-linux-gnueabi/usr/src/kernel
#
# Kernel module build dependency
all:
    make -C $(KBUILD_DIR) M=$(PWD) modules
#
# Kernel module clean dependency
clean:
    make -C $(KBUILD_DIR) M=$(PWD) clean
@endcode

@subsection howToAddKernelDriver_makeKernel_buildKernel Build Kernel

Then add the example kernel module source @c ktest_module.c file and its Makefile to @c kmodule
directory.

You're then ready to build the example kernel module:
@code
make
@endcode

You should then have a @c ktest_module.ko located in kmodule directory.

@warning Ensure the kernel sources version used to compile the module matches the kernel version
running on the target.

@note The @c y17-ext directory could be relocated to directory of your choice. If relocated, @c PATH and
@c B_KDIR variables must be changed accordingly.

@section howToAddKernelDriver_loadDriver Load Driver

You can load the driver onto the target device
@ref howToAddKernelDriver_loadDriver_manualLoad "manually" or use Legato's
@ref howToAddKernelDriver_loadDriver_mDefFile.

@subsection howToAddKernelDriver_loadDriver_manualLoad Manual Load

This section shows how to:
- copy a module to a target
- manually install a module on a target
- remove a module from a target

This is how to use @c scp to copy a kernel module (driver) onto the
target:
@code
scp ktest_module.ko root@$target_IP:/home/root/ktest_dir
@endcode

This is how to install a module, and check it installed:
@code
root@swi-mdm9x15:~/ktest_dir# insmod ktest_module.ko
root@swi-mdm9x15:~/ktest_dir# lsmod |grep ktest
ktest_module 648 0 - Live 0xbf0eb000 (PO)
@endcode

This is how to check the log file:
@code
root@swi-mdm9x15:~/ktest_dir# logread |tail -n 2
Nov 10 18:16:30 swi-mdm9x15 user.info kernel: [88600.728022] Driver version 1.0.0
Nov 10 18:16:30 swi-mdm9x15 user.info kernel: [88600.728053] Buona Sera :)
@endcode

This is how to remove the module, and check the log that it was removed:
@code
root@swi-mdm9x15:~/ktest_dir# rmmod ktest_module.ko
root@swi-mdm9x15:~/ktest_dir# logread |tail -n 2
Nov 10 18:16:30 swi-mdm9x15 user.info kernel: [88600.728053] Buona Sera :)
Nov 10 18:19:38 swi-mdm9x15 user.info kernel: [88789.028495] Ciao!
root@swi-mdm9x15:~/ktest_dir#
@endcode

@subsection howToAddKernelDriver_loadDriver_mDefFile mdef File Load
You can also use Legato's @c mdef to load the pre-built kernel module.

Create @ref defFilesMdef @c hello.mdef file in any location with this @c preBuilt section:
@code
preBuilt: /path/to/kernel/module/ktest_module.ko
@endcode

Modify @c $LEGATO_ROOT/system.sdef (in Legato root dir) to include the @c kernelModule path:
@code
kernelModules:
{ <path_to_hello.mdef> }
@endcode

@subsection howToAddKernelDriver_loadDriver_buildInstall Build and Install

Then @ref basicAppsCreate_buildApp "build" and @ref basicAppsCreate_instTarget "install" Legato on
a WP85 module.

If the driver load succeeds, a console log message like this should display:
@code
Jul 14 17:58:28 swi-mdm9x15 user.info Legato: INFO | supervisor[23722]/supervisor T=main | kernelModules.c ModuleGetParams() 119 | Module ktest_module.ko uses no parameters.
Jul 14 17:58:28 swi-mdm9x15 user.info Legato: INFO | supervisor[23722]/supervisor T=main | kernelModules.c ModuleInsert() 286 | New kernel module 'ktest_module'
Jul 14 17:58:28 swi-mdm9x15 user.info kernel: [244746.908837] Driver version 1.0.0
Jul 14 17:58:28 swi-mdm9x15 user.info kernel: [244746.911157] Buona Sera
@endcode

Then use @c lsmod on the target to check that your kernel module is listed (installed).
@code
root@swi-mdm9x15:~# lsmod
ktest_module 648 0 - Live 0xbf0c0000 (O) <===============
ipv6 290588 14 [permanent], Live 0xbf060000
usb_storage 41365 0 - Live 0xbf04c000
sd_mod 29567 0 - Live 0xbf03f000
scsi_mod 133355 2 usb_storage,sd_mod, Live 0xbf00d000
unix 29432 659 - Live 0xbf000000
@endcode

**/
